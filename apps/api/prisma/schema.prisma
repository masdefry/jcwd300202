// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String  @id @default(cuid())
  email              String  @unique
  password           String?
  isVerified         Boolean @default(false)
  role               Role    @default(USER)
  isGoogleRegistered Boolean @default(false)
  token              String? @db.Text
  username          String?    @default("Roomify's friend")
  phoneNumber       String?
  birthDate         DateTime?
  nationality       String?
  gender            Gender?
  address           String?
  directory         String?
  filename          String?
  fileExtension     String?

  countryId Int?
  country Country? @relation(fields: [countryId], references: [id])
  
  cityId Int?
  city City? @relation(fields: [cityId], references: [id])

  transaction Transaction[]
  review      Review[]
  historyView HistoryView[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}


enum Gender {
  MALE
  FEMALE
}

model Country {
  id   Int    @id @default(autoincrement())
  description String
  name String
  filename String
  directory String
  fileExtension String @default("jpg")

  user User[]
  cities   City[]
  property Property[]
  transaction Transaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("countries")
}

model City {
  id            Int    @id @default(autoincrement())
  name          String
  directory     String
  filename      String
  fileExtension String @default("jpg")

  countryId Int
  country   Country @relation(fields: [countryId], references: [id])

  user User[]
  property Property[]
  transaction Transaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("cities")
}

model Tenant {
  id         String  @id @default(cuid())
  email      String  @unique
  password   String?
  role       Role    @default(TENANT)
  isVerified Boolean @default(false)
  token      String? @db.Text
  pic        String? @default("Roomify's tenant")
  phoneNumber       String?
  address           String?
  directory String?
  filename  String?
  fileExtension String?

  property    Property[]
  transaction Transaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tenants")
}

enum Role {
  USER
  TENANT
}

model Property {
  id                String   @id @unique
  name              String
  address           String
  zipCode           String
  location          String
  checkInStartTime  DateTime
  checkInEndTime    DateTime
  checkOutStartTime DateTime
  checkOutEndTime   DateTime
  slug              String   @unique
  

  propertyTypeId Int?
  propertyType   PropertyType? @relation(fields: [propertyTypeId], references: [id])

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  countryId Int?
  country   Country? @relation(fields: [countryId], references: [id])

  cityId Int?
  city   City? @relation(fields: [cityId], references: [id])

  propertyRoomType    PropertyRoomType[]
  propertyDetail      PropertyDetail?
  propertyHasFacility PropertyHasFacility[]
  transaction         Transaction[]
  review              Review[]
  historyView         HistoryView[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property")
}

model PropertyDetail {
  id                      Int    @id @default(autoincrement())
  propertyDescription     String @db.Text
  neighborhoodDescription String @db.Text
  phoneNumber             String
  url                     String
  totalRooms              Int

  propertyImage PropertyImage[]

  propertyId String   @unique
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_details")
}

model PropertyImage {
  id        Int    @id @default(autoincrement())
  directory String
  filename  String
  fileExtension String @default("jpg")

  propertyDetailId Int
  propertyDetail   PropertyDetail @relation(fields: [propertyDetailId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_images")
}

model PropertyType {
  id          Int    @id @default(autoincrement())
  name        String
  description String @db.Text

  property Property[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_types")
}

model PropertyFacility {
  id            Int     @id @default(autoincrement())
  name          String
  iconDirectory String?
  iconFilename  String?
  iconFileExtension String @default("png")

  propertyHasFacility PropertyHasFacility[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_facilities")
}

model PropertyHasFacility {
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  propertyFacilityId Int
  propertyFacility   PropertyFacility @relation(fields: [propertyFacilityId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([propertyFacilityId, propertyId])
  @@map("property_has_facilities")
}

model PropertyRoomType {
  id         Int    @id @default(autoincrement())
  name       String
  description String
  rooms      Int?
  capacity   Int
  bathrooms  Int
  price      Int
  totalRooms Int

  propertyRoomImage PropertyRoomImage[]

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  transaction       Transaction[]
  roomHasFacilities RoomHasFacilities[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_room_types")
}

model PropertyRoomFacility {
  id            Int     @id @default(autoincrement())
  name          String
  iconDirectory String?
  iconFilename  String?
  iconFileExtension String @default("png")

  roomHasFacilities RoomHasFacilities[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_room_facilites")
}

model RoomHasFacilities {
  propertyRoomTypeId Int
  propertyRoomType   PropertyRoomType @relation(fields: [propertyRoomTypeId], references: [id])

  propertyRoomFacilityId Int
  propertyRoomFacility   PropertyRoomFacility @relation(fields: [propertyRoomFacilityId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([propertyRoomFacilityId, propertyRoomTypeId])
  @@map("room_has_facilities")
}

model PropertyRoomImage {
  id        Int    @id @default(autoincrement())
  directory String
  filename  String
  fileExtension String @default("jpg")

  propertyRoomTypeId Int
  propertyRoomType   PropertyRoomType @relation(fields: [propertyRoomTypeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_room_images")
}

model HistoryView {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("history_view")
}

model Transaction {
  id           String   @id @unique
  checkInDate  DateTime
  checkOutDate DateTime
  total        Int
  price        Int
  qty          Int
  expiryDate   DateTime

  adult Int @default(1)
  children Int @default(0)


  cityId Int
  city   City   @relation(fields: [cityId], references: [id])

  countryId Int
  country   Country   @relation(fields: [countryId], references: [id])
  
  userId String
  user   User   @relation(fields: [userId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  roomId Int
  room   PropertyRoomType @relation(fields: [roomId], references: [id])

  transactionStatus TransactionStatus[]
  review            Review?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("transactions")
}

model TransactionStatus {
  id     Int    @id @default(autoincrement())
  status Status

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("transaction_status")
}

enum Status {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION_PAYMENT
  PAID
  CANCELLED
  EXPIRED
}

model Review {
  comment String? @db.Text
  rating Int?

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([propertyId, userId, transactionId])
  @@map("reviews")
}

