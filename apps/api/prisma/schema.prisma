// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String

  profile     Profile[]
  transaction Transaction[]
  review      Review[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model Profile {
  id           String   @id @default(cuid())
  username     String
  phone_number String
  birth_date   DateTime
  nationality  String
  gender       Gender
  address      String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("profile")
}

enum Gender {
  MALE
  FEMALE
}

model Tenant {
  id       String @id @default(cuid())
  email    String @unique
  password String

  property    Property[]
  transaction Transaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tenants")
}

model Property {
  id                Int      @id @default(autoincrement())
  name              String
  country           String
  address           String
  zip_code          String
  city              String
  location          String
  checkInStartTime  DateTime
  checkInEndTime    DateTime
  checkOutStartTime DateTime
  checkOutEndTime   DateTime

  propertyTypeId Int
  propertyType   PropertyType @relation(fields: [propertyTypeId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  propertyRoomType    PropertyRoomType[]
  propertyDetail      PropertyDetail?
  propertyHasFacility PropertyHasFacility[]
  transaction         Transaction[]
  review              Review[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property")
}

model PropertyDetail {
  id                       Int    @id @default(autoincrement())
  property_description     String @db.Text
  neighborhood_description String @db.Text
  phone_number             String
  url                      String
  total_room               Int

  propertyImage PropertyImage[]

  propertyId Int      @unique
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_details")
}

model PropertyImage {
  id        Int    @id @default(autoincrement())
  directory String
  filename  String

  propertyDetailId Int
  propertyDetail   PropertyDetail @relation(fields: [propertyDetailId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_images")
}

model PropertyType {
  id          Int    @id @default(autoincrement())
  name        String
  description String @db.Text

  property Property[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_types")
}

model PropertyFacility {
  id            Int     @id @default(autoincrement())
  name          String
  iconDirectory String?
  iconFilename  String?

  propertyHasFacility PropertyHasFacility[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_facilities")
}

model PropertyHasFacility {
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  propertyFacilityId Int
  propertyFacility   PropertyFacility @relation(fields: [propertyFacilityId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([propertyFacilityId, propertyId])
  @@map("property_has_facilities")
}

model PropertyRoomType {
  id          Int    @id @default(autoincrement())
  name        String
  rooms       Int?
  capacity    Int
  bathrooms   Int
  price       Int
  total_rooms Int

  propertyRoomImage PropertyRoomImage[]

  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  transaction       Transaction[]
  roomHasFacilities RoomHasFacilities[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_room_types")
}

model PropertyRoomFacility {
  id            Int     @id @default(autoincrement())
  name          String
  iconDirectory String?
  iconFilename  String?

  roomHasFacilities RoomHasFacilities[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_room_facilites")
}

model RoomHasFacilities {
  propertyRoomTypeId Int
  propertyRoomType   PropertyRoomType @relation(fields: [propertyRoomTypeId], references: [id])

  propertyRoomFacilityId Int
  propertyRoomFacility   PropertyRoomFacility @relation(fields: [propertyRoomFacilityId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([propertyRoomFacilityId, propertyRoomTypeId])
  @@map("room_has_facilities")
}

model PropertyRoomImage {
  id        Int    @id @default(autoincrement())
  directory String
  filename  String

  propertyRoomTypeId Int
  propertyRoomType   PropertyRoomType @relation(fields: [propertyRoomTypeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("property_room_images")
}

model Transaction {
  id           String   @id @unique
  checkInDate  DateTime
  checkOutDate DateTime
  total        Int
  price        Int
  qty          Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  roomId Int
  room   PropertyRoomType @relation(fields: [roomId], references: [id])

  transactionStatus TransactionStatus[]
  review            Review?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("transactions")
}

model TransactionStatus {
  id     Int    @id @default(autoincrement())
  status Status

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("transaction_status")
}

enum Status {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION_PAYMENT
  PAID
  CANCELLED
}

model Review {
  comment String @db.Text

  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([propertyId, userId, transactionId])
  @@map("reviews")
}
